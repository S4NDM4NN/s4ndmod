//
//Brush Scripting
//Map: mp_assault_cp
//Last edited by: Brandon
//

game_manager
{
	spawn
	{
		// Set scenario information

		wm_mapdescription			"Checkpoint: Secure the Base."
		wm_axis_respawntime		30
		wm_allied_respawntime		30

		wm_set_round_timelimit	10

		// Number of checkpoints

		wm_number_of_objectives		4

		// Set objective #1 properties

		// Flag names (areas)
		wm_set_objective_status		1	-1
		wm_objective_axis_desc		1	"Capture the Gate Area."
		wm_objective_allied_desc	1	"Capture the Gate Area."
		wm_set_objective_status		2	-1
		wm_objective_axis_desc		2	"Capture the Communications Tower."
		wm_objective_allied_desc	2	"Capture the Communications Tower."
		wm_set_objective_status		3	-1
		wm_objective_axis_desc		3	"Capture the Axis Building."
		wm_objective_allied_desc	3	"Capture the Axis Building."
		wm_set_objective_status		4	-1
		wm_objective_axis_desc		4	"Capture the Warehouse."
		wm_objective_allied_desc	4	"Capture the Warehouse."
		wm_overview_image			"video/capturemaps.roq"

		wm_objective_image			1	"gfx/2d/mp_objectives/checkpoint_obj.tga"
		wm_objective_image			2	"gfx/2d/mp_objectives/checkpoint_obj.tga"
		wm_objective_image			3	"gfx/2d/mp_objectives/checkpoint_obj.tga"
		wm_objective_image			4	"gfx/2d/mp_objectives/checkpoint_obj.tga"

		// SHORT DESCRIPTIONS

		wm_objective_short_axis_desc	1	"Gate Area"
		wm_objective_short_axis_desc	2	"Communications Tower"
		wm_objective_short_axis_desc	3	"Axis Building"
		wm_objective_short_axis_desc	4	"Warehouse"

		wm_objective_short_allied_desc	1	"Gate Area"
		wm_objective_short_allied_desc	2	"Communications Tower"
		wm_objective_short_allied_desc	3	"Axis Building"
		wm_objective_short_allied_desc	4	"Warehouse"

		// If the round timer expires, nobody wins
		// Set the round winner:  0 == AXIS, 1 == ALLIED, -1 == Noone
		wm_setwinner -1

		// Accum 1-4 will be the state of the checkpoints, -1 means nobody controls the flag
		accum 1 set -1
		accum 2 set -1
		accum 3 set -1
		accum 4 set -1

		// Accum 7 tracks the tide of battle
		accum 7 set 0
	}

	// The following functions are called from the checkpoints when either team takes control of it

	trigger cp1_blue
	{
		// Change the objective state internally, so UI can update, etc.
		// Allied takes control of checkpoint #1
		wm_set_objective_status		1	1

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp1_blue

		// Change the variable within the script so that we can check if someone wins the round
		accum 1 set 1

		// Some kind of UI pop-up to alert players
		wm_announce	"Allies capture the Gate Area!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_blue
	}

	trigger cp1_red
	{
		// Change the objective state internally, so UI can update, etc.
		// Axis takes control of checkpoint #1
		wm_set_objective_status		1	0

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp1_red

		// Change the variable within the script so that we can check if someone wins the round
		accum 1 set 0

		// Some kind of UI pop-up to alert players
		wm_announce	"Axis captures the Gate Area!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_red
	}

	trigger cp2_blue
	{
		// Change the objective state internally, so UI can update, etc.
		// Allied takes control of checkpoint #1
		wm_set_objective_status		2	1

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp2_blue

		// Change the variable within the script so that we can check if someone wins the round
		accum 2 set 1

		// Some kind of UI pop-up to alert players
		wm_announce	"Allies capture the Communications Tower!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_blue
	}

	trigger cp2_red
	{
		// Change the objective state internally, so UI can update, etc.
		// Axis takes control of checkpoint #1
		wm_set_objective_status		2	0

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp2_red

		// Change the variable within the script so that we can check if someone wins the round
		accum 2 set 0

		// Some kind of UI pop-up to alert players
		wm_announce	"Axis captures the Communications Tower!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_red
	}

	trigger cp3_blue
	{
		// Change the objective state internally, so UI can update, etc.
		// Allied takes control of checkpoint #1
		wm_set_objective_status		3	1

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp3_blue

		// Change the variable within the script so that we can check if someone wins the round
		accum 3 set 1

		// Some kind of UI pop-up to alert players
		wm_announce	"Allies capture the Axis Building!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_blue
	}

	trigger cp3_red
	{
		// Change the objective state internally, so UI can update, etc.
		// Axis takes control of checkpoint #1
		wm_set_objective_status		3	0

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp3_red

		// Change the variable within the script so that we can check if someone wins the round
		accum 3 set 0

		// Some kind of UI pop-up to alert players
		wm_announce	"Axis reclaims the Axis Building!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_red
	}

	trigger cp4_blue
	{
		// Change the objective state internally, so UI can update, etc.
		// Allied takes control of checkpoint #1
		wm_set_objective_status		4	1

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp4_blue

		// Change the variable within the script so that we can check if someone wins the round
		accum 4 set 1

		// Some kind of UI pop-up to alert players
		wm_announce	"Allies capture the Axis Warehouse!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_blue
	}

	trigger cp4_red
	{
		// Change the objective state internally, so UI can update, etc.
		// Axis takes control of checkpoint #1
		wm_set_objective_status		4	0

		// First update winner based on number of flags held by both teams
		trigger game_manager adjustwinner_cp4_red

		// Change the variable within the script so that we can check if someone wins the round
		accum 4 set 0

		// Some kind of UI pop-up to alert players
		wm_announce	"Axis reclaims the Axis Warehouse!"

		// Call function to check if the round has been won
		trigger game_manager checkgame_red
	}

	// Keep winner set to team with most flags

	trigger checkwinner
	{
		wm_setwinner -1
		accum 7 abort_if_equal 0
		wm_setwinner 1
		accum 7 abort_if_greater_than 0
		wm_setwinner 0
	}

	trigger adjustwinner_cp1_blue
	{
		accum 7 inc 1
		trigger game_manager checkwinner
		accum 1 abort_if_not_equal 0
		accum 7 inc 1
		trigger game_manager checkwinner
	}

	trigger adjustwinner_cp1_red
	{
		accum 7 inc -1
		trigger game_manager checkwinner
		accum 1 abort_if_not_equal 1
		accum 7 inc -1
		trigger game_manager checkwinner
	}

	trigger adjustwinner_cp2_blue
	{
		accum 7 inc 1
		trigger game_manager checkwinner
		accum 2 abort_if_not_equal 0
		accum 7 inc 1
		trigger game_manager checkwinner
	}

	trigger adjustwinner_cp2_red
	{
		accum 7 inc -1
		trigger game_manager checkwinner
		accum 2 abort_if_not_equal 1
		accum 7 inc -1
		trigger game_manager checkwinner
	}

	trigger adjustwinner_cp3_blue
	{
		accum 7 inc 1
		trigger game_manager checkwinner
		accum 3 abort_if_not_equal 0
		accum 7 inc 1
		trigger game_manager checkwinner
	}

	trigger adjustwinner_cp3_red
	{
		accum 7 inc -1
		trigger game_manager checkwinner
		accum 3 abort_if_not_equal 1
		accum 7 inc -1
		trigger game_manager checkwinner
	}

	trigger adjustwinner_cp4_blue
	{
		accum 7 inc 1
		trigger game_manager checkwinner
		accum 4 abort_if_not_equal 0
		accum 7 inc 1
		trigger game_manager checkwinner
	}

	trigger adjustwinner_cp4_red
	{
		accum 7 inc -1
		trigger game_manager checkwinner
		accum 4 abort_if_not_equal 1
		accum 7 inc -1
		trigger game_manager checkwinner
	}

	// Check for game-winning condition

	trigger checkgame_blue
	{
		// Check all for checkpoints and see if they have been set to '1' - allied
		accum 1 abort_if_not_equal 1
		accum 2 abort_if_not_equal 1
		accum 3 abort_if_not_equal 1
		accum 4 abort_if_not_equal 1

		// Set the round winner:  0 == AXIS, 1 == ALLIED
		wm_setwinner 1

		// End the round
		wm_endround
	}

	trigger checkgame_red
	{
		// Check all for checkpoints and see if they have been set to '0' - axis
		accum 1 abort_if_not_equal 0
		accum 2 abort_if_not_equal 0
		accum 3 abort_if_not_equal 0
		accum 4 abort_if_not_equal 0

		// Set the round winner:  0 == AXIS, 1 == ALLIED
		wm_setwinner 0

		// End the round
		wm_endround
	}
}


checkpoint1
{
	trigger axis_capture
	{
		trigger game_manager cp1_red
	}

	trigger allied_capture
	{
		trigger game_manager cp1_blue
	}
}

checkpoint2
{
	trigger axis_capture
	{
		trigger game_manager cp2_red
	}

	trigger allied_capture
	{
		trigger game_manager cp2_blue
	}
}

checkpoint3
{
	trigger axis_capture
	{
		trigger game_manager cp3_red
	}

	trigger allied_capture
	{
		trigger game_manager cp3_blue
	}
}

checkpoint4
{
	trigger axis_capture
	{
		trigger game_manager cp4_red
	}

	trigger allied_capture
	{
		trigger game_manager cp4_blue
	}
}

// OBJ to REMOVE

axis_obj1 //The Radar
{
	spawn
	{
		remove
	}
}

//door_obj1 //Warehouse Doors used to be axis_obj2
//{
//	spawn
//	{
//		remove
//	}
//}

//gate_obj1
//{
//	spawn
//	{
//		remove
//	}
//}

gh1_trigger
{
	spawn
	{
		remove
	}
}

under_trigger
{
	spawn
	{
		remove
	}
}

tower_trigger
{
	spawn
	{
		remove
	}
}

hatch1_getme
{
	spawn
	{
		remove
	}
}

flag_respawn_base
{
	spawn
	{
		remove
	}
}

flag_respawn_obj
{
	spawn
	{
		remove
	}
}

obj_block01
{
	spawn
	{
		remove
	}
}

obj_explo01
{
	spawn
	{
		remove
	}
}

gate_plate01
{
	spawn
	{
		remove
	}
}

gate_plate02
{
	spawn
	{
		remove
	}
}

gate_light01
{
	spawn
	{
		remove
	}
}

gate_light02
{
	spawn
	{
		remove
	}
}

gate_button01
{
	spawn
	{
		remove
	}
}

gate_button02
{
	spawn
	{
		remove
	}
}

gate_redlight01
{
	spawn
	{
		remove
	}
}

gate_redlight02
{
	spawn
	{
		remove
	}
}

big_lever1
{
	spawn
	{
		remove
	}
}

big_lever1a
{
	spawn
	{
		remove
	}
}

gate_two01
{
	spawn
	{
		remove
	}
}

obj_hurt_trig01
{
	spawn
	{
		remove
	}
}

// ALARMS

alarm1_trigger1
{
	spawn
	{
			accum 7 set 0
	}

	trigger alarm1_on
	{
			accum 7 abort_if_not_equal 1
			trigger alarm1 off
			accum 7 set 0
			wait 500
			trigger alarm1_trigger2 setaccum0
	}

	trigger setaccum0
	{
			accum 7 set 0
	}

	trigger setaccum1
	{
			accum 7 set 1
	}
}

alarm1_trigger2
{
	spawn
	{
			accum 7 set 0
	}

	trigger alarm1_off
	{
			accum 7 abort_if_not_equal 0
			trigger alarm1 on
			accum 7 set 1
			wait 500
			trigger alarm1_trigger1 setaccum1
	}

	trigger setaccum0
	{
			accum 7 set 0
	}

	trigger setaccum1
	{
			accum 7 set 1
	}
}

alarm1
{
	spawn
	{
	}

	trigger off
	{
		alertentity sirens
	}

	trigger on
	{
		alertentity sirens
	}
}

alarm2_trigger1
{
	spawn
	{
			accum 7 set 0
	}

	trigger alarm2_on
	{
			accum 7 abort_if_not_equal 1
			trigger alarm2 off
			accum 7 set 0
			print "Turning off!"
			wait 500
			trigger alarm2_trigger2 setaccum0
	}

	trigger setaccum0
	{
			accum 7 set 0
	}

	trigger setaccum1
	{
			accum 7 set 1
	}
}

alarm2_trigger2
{
	spawn
	{
			accum 7 set 0
	}

	trigger alarm2_off
	{
			accum 7 abort_if_not_equal 0
			trigger alarm2 on
			accum 7 set 1
			print "Turning on!"
			wait 500
			trigger alarm2_trigger1 setaccum1
	}

	trigger setaccum0
	{
			accum 7 set 0
	}

	trigger setaccum1
	{
			accum 7 set 1
	}
}

alarm2
{
	spawn
	{
	}

	trigger off
	{
		alertentity sirens2
	}

	trigger on
	{
		alertentity sirens2
	}
}

// GATES

big_lever1
{
	spawn
	{
		//gotomarker lever1_butpos1 1000
	}

	trigger down
	{
		gotomarker lever1_butpos2 16
		trigger big_gate1 open
	}

	trigger up
	{
		gotomarker lever1_butpos1 16
		trigger big_gate1 close
	}
}

big_lever1a
{
	spawn
	{
		//gotomarker lever1a_butpos1 1000
	}

	trigger down
	{
		gotomarker lever1a_butpos2 16
	}

	trigger up
	{
		gotomarker lever1a_butpos1 16
	}
}

big_lever2
{
	spawn
	{
		//gotomarker lever2_butpos1 1000
	}

	trigger down
	{
		gotomarker lever2_butpos2 16
		trigger big_gate2 open
	}

	trigger up
	{
		gotomarker lever2_butpos1 16
		trigger big_gate2 close
	}
}

big_lever2a
{
	spawn
	{
		//gotomarker lever2a_butpos1 1000
	}

	trigger down
	{
		gotomarker lever2a_butpos2 16
	}

	trigger up
	{
		gotomarker lever2a_butpos1 16
	}
}

big_gate1_trigger1
{
	spawn
	{
			accum 5 set 0
	}

	trigger big_lever1up
	{
			accum 5 abort_if_not_equal 1
			trigger big_lever1 up
			trigger big_lever1a up
			accum 5 set 0
			wait 2000
			trigger big_gate1_trigger2 setaccum0
	}

	trigger setaccum0
	{
			accum 5 set 0
	}

	trigger setaccum1
	{
			accum 5 set 1
	}
}

big_gate2_trigger1
{
	spawn
	{
			accum 6 set 0
	}

	trigger big_lever2up
	{
			accum 6 abort_if_not_equal 1
			trigger big_lever2 up
			trigger big_lever2a up
			accum 6 set 0
			wait 2000
			trigger big_gate2_trigger2 setaccum0
	}

	trigger setaccum0
	{
			accum 6 set 0
	}

	trigger setaccum1
	{
			accum 6 set 1
	}
}

big_gate1_trigger2
{
	spawn
	{
			accum 5 set 0
	}

	trigger big_lever1down
	{
			accum 5 abort_if_not_equal 0
			trigger big_lever1 down
			trigger big_lever1a down
			accum 5 set 1
			wait 2000
			trigger big_gate1_trigger1 setaccum1
	}

	trigger setaccum0
	{
			accum 5 set 0
	}

	trigger setaccum1
	{
			accum 5 set 1
	}
}

big_gate2_trigger2
{
	spawn
	{
			accum 6 set 0
	}

	trigger big_lever2down
	{
			accum 6 abort_if_not_equal 0
			trigger big_lever2 down
			trigger big_lever2a down
			accum 6 set 1
			wait 2000
			trigger big_gate2_trigger1 setaccum1
	}

	trigger setaccum0
	{
			accum 6 set 0
	}

	trigger setaccum1
	{
			accum 6 set 1
	}
}

big_gate1
{
	spawn
	{
		wait 10
		gotomarker big_gate1_pos2 16
	}

	trigger open
	{
		wait 500
		playsound sound/scenaric/assault/big_gate1.wav
		wait 400
		playsound sound/scenaric/assault/big_gate2.wav looping forever
		gotomarker big_gate1_pos2 16 wait
		stopsound
		playsound sound/scenaric/assault/big_gate3.wav
	}

	trigger close
	{
		wait 500
		playsound sound/scenaric/assault/big_gate1.wav
		wait 400
		playsound sound/scenaric/assault/big_gate2.wav looping forever
		gotomarker big_gate1_pos1 16 wait
		stopsound
		playsound sound/scenaric/assault/big_gate3.wav
	}
}

big_gate2
{
	spawn
	{
		wait 10
		gotomarker big_gate2_pos2 16
	}

	trigger open
	{
		wait 500
		playsound sound/scenaric/assault/big_gate1.wav
		wait 400
		playsound sound/scenaric/assault/big_gate2.wav looping forever
		gotomarker big_gate2_pos1 16 wait
		//gotomarker big_gate2_pos2 16 wait
		stopsound
		playsound sound/scenaric/assault/big_gate3.wav
	}

	trigger close
	{
		wait 500
		playsound sound/scenaric/assault/big_gate1.wav
		wait 400
		playsound sound/scenaric/assault/big_gate2.wav looping forever
		gotomarker big_gate2_pos2 16 wait
		//gotomarker big_gate2_pos1 16 wait
		stopsound
		playsound sound/scenaric/assault/big_gate3.wav
	}
}

// Hangar Lever 1/Door 1

hangar_lever1
{
	spawn
	{
	}

	trigger down
	{
	//	gotomarker hangar_butpos2 16
	//	trigger allied_hangardoor1 open
	}

	trigger up	//door goes down
	{
	//	gotomarker hangar_butpos1 16
	//	trigger allied_hangardoor1 close
	}
}

allied_hangardoor1
{
	spawn
	{
	trigger allied_hangardoor1 open
	}

	trigger open
	{
		wait 500
		playsound sound/scenaric/assault/big_gate1.wav
		wait 400
		playsound sound/scenaric/assault/big_gate2.wav looping forever
		gotomarker al_hangardoor1_pos2 16 wait
		stopsound
		playsound sound/scenaric/assault/big_gate3.wav
	}

	trigger close
	{
		wait 500
		playsound sound/scenaric/assault/big_gate1.wav
		wait 400
		playsound sound/scenaric/assault/big_gate2.wav looping forever
		gotomarker al_hangardoor1_pos1 16 wait
		stopsound
		playsound sound/scenaric/assault/big_gate3.wav
	}
}

hangardoor1_trigger1
{
	spawn
	{
			accum 5 set 0
	}

	trigger hangar_lever1up
	{
			accum 5 abort_if_not_equal 1
			trigger hangar_lever1 up
			accum 5 set 0
			wait 2000
			trigger hangardoor1_trigger2 setaccum0
	}

	trigger setaccum0
	{
			accum 5 set 0
	}

	trigger setaccum1
	{
			accum 5 set 1
	}
}

hangardoor1_trigger2
{
	spawn
	{
			accum 5 set 0
	}

	trigger hangar_lever1down
	{
			accum 5 abort_if_not_equal 0
			trigger hangar_lever1 down
			accum 5 set 1
			wait 2000
			trigger hangardoor1_trigger1 setaccum1
	}

	trigger setaccum0
	{
			accum 5 set 0
	}

	trigger setaccum1
	{
			accum 5 set 1
	}
}